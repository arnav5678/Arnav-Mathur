# -*- coding: utf-8 -*-
"""oops concept.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1whkgDlD6kg-Je2po6_XwVKlyhPwRE0D7

OOPs

1)OOPS=OOPs is a way of organizing code that uses objects and classes to represent real-world entities and their behavior.
In OOPs, object has attributes thing that has specific data and can perform certain actions using methods.

2)class:- A class is a blueprint or template for an object.

3)instance:- Part of a class.

4)constructor:- constructor are the function which are used to assign the memory address for an object.
--> --init--()

Object: Any real time entity is know as object.
These object are of two type:-
1) characteristics
2) Behaviour(Functionality)

OOPs Concepts in Python
1)Class in Python
2)Objects in Python
3)Polymorphism in Python
4)Encapsulation in Python
5)Inheritance in Python
6)Data Abstraction in Python


1) characterstics define in blueprint by variable
"""

class HouseDesign:
  color="yellow"

# object=class()
h1=HouseDesign()
print(h1.color)

# When can define object by any name.
regex = HouseDesign()
print(regex.color)

# This property known as instance part of a class.
h2 = HouseDesign()
h2.color="white"
print(h2.color)

# Defining constructor
# when we create object the constructor will be called.
# self is a kind of object that stores  refrence of the current object
class HouseDesign:
    def __init__(self):
      print("Mistri sahab aa gaye",self)
    color="yellow"

print(HouseDesign)

class HouseDesign:
    def __init__(self):
      print("Mistri sahab aa gaye",self)
    color="yellow"

print(HouseDesign)

h1=HouseDesign()

print(h1)

class HouseDesign:
    def __init__(self,x):
      self.color=x

#first object
h1=HouseDesign("yellow")
print(h1.color)

h2=HouseDesign("Green")
print(h2.color)

# Inheritence => Parent class => child class

class Parent:
    amount=50000
class child:
    salary=10000

c1=child()
print(c1.salary)

class Parent:
    amount=50000
class child:
    salary=10000

c1=child()
print(c1.amount)

class Parent:
    amount=50000
class child(Parent):
    salary=10000

c1=child()
print(c1.amount)

# create class name as driver
class Driver:
    def __init__(self, name,email,id):
        self.name = name
        self.email = email
        self.id=id

Driver1=Driver("Sahil","sahil@gmail.com",134534)
Driver2=Driver("Ramesh","ramesh@gmail.com",45327)
print(Driver1.name)
print(Driver1.email)
print(Driver1.id)
print("""
""")
print(Driver2.name)
print(Driver2.email)
print(Driver2.id)

class customer:
    def __init__(self,id,name,email,wallet):
        self.id=id
        self.name = name
        self.email = email
        self.wallet=wallet

customer1=customer(1234,"Somani","sahil@gmail.com",134534)
print(customer1.id)
print(customer1.name)
print(customer1.email)
print(customer1.wallet)

class Customer(Driver): #driver is parent class
  def __init__(self, name, email, id):
     super().__init__(name, email, id)

c1=Customer("naina","naina@gmail.com",12)
print(c1.name)
print(c1.email)
print(c1.id)

class Employee:
    def Employee_detail(self, id, name, email, monthly_salary):
        self.id = id
        self.name = name
        self.email = email
        self.annual_salary = monthly_salary * 12

    def get_email_domain(self):
        return self.email.split('@')[-1]

    def display(self):
        print(f"ID: {self.id}")
        print(f"Name: {self.name}")
        print(f"Email: {self.email}")
        print(f"Annual Salary: {self.annual_salary}")
        print(f"Email Domain: {self.get_email_domain()}")

employee1 = Employee()
employee1.Employee_detail(1234, "Somani", "sahil@gmail.com", 11211)

employee1.display()